---
export const prerender = false;
import { bodyTypes, fuelTypes, transmission, conditions } from "~/content.config";
import type { CollectionEntry } from "astro:content";
import IconReset from "~/assets/images/icons/reset.svg";
type Car = CollectionEntry<"cars">;

let url = new URL("/api/getFilteredCars.json", Astro.url);
const response = await fetch(url);
const allCars: Car[] = await response.json();

const makes = [...new Set(allCars.map((car: Car) => car.data.general.make))].sort();
const colors = [...new Set(allCars.map((car: Car) => car.data.exterior.color))].sort();
const { count } = Astro.props;
---

<div class="max-lg:hidden shrink-0 lg:inset-y-0 lg:z-50 lg:flex lg:w-80 lg:flex-col">
	<div class="flex grow flex-col gap-y-5 overflow-y-auto bg-white px-6 py-4">
		<form id="form-filter" method="get" class="grid grid-cols-1 gap-y-6">
			<div>
				<div class="flex items-center gap-x-2">
					<label for="make">Make</label>
					<button id="clear-input-make" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<select name="make" id="make">
					<option value="all">All</option>
					{makes.map((make) => <option value={make}>{make}</option>)}
				</select>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="model">Model</label>
					<button id="clear-input-model" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<select name="model" id="model">
					<option value="all">All</option>
				</select>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="color">Color</label>
					<button id="clear-input-color" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<select name="color" id="color">
					<option value="all">All</option>
					{colors.map((color) => <option value={color}>{color}</option>)}
				</select>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="bodyType">Body Type</label>
					<button id="clear-input-bodyType" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<select name="bodyType" id="bodyType">
					<option value="all">All</option>
					{bodyTypes.map((bodyType) => <option value={bodyType}>{bodyType}</option>)}
				</select>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="fuelType">Fuel Type</label>
					<button id="clear-input-fuelType" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<select name="fuelType" id="fuelType">
					<option value="all">All</option>
					{fuelTypes.map((fuelType) => <option value={fuelType}>{fuelType}</option>)}
				</select>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="transmission">Transmission</label>
					<button id="clear-input-transmission" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<select name="transmission" id="transmission">
					<option value="all">All</option>
					{transmission.map((transmission) => <option value={transmission}>{transmission}</option>)}
				</select>
			</div>

			<div>
				<div class="flex items-center gap-x-2">
					<label for="condition">Condition</label>
					<button id="clear-input-condition" type="button" class="hidden">
						<IconReset class="size-3 -mt-px" />
					</button>
				</div>
				<select name="condition" id="condition">
					<option value="all">All</option>
					{conditions.map((condition) => <option value={condition}>{condition}</option>)}
				</select>
			</div>

			<div>
				<button type="submit" class="button button-yellow w-full">
					Search <span id="filter-result-found">({count})</span></button
				>
			</div>
		</form>
	</div>
</div>

<script>
	document.addEventListener("astro:page-load", function () {
		const form = document.getElementById("form-filter") as HTMLFormElement;

		if (form) {
			const resultFound = document.getElementById("filter-result-found")!;
			const urlParams = new URLSearchParams(window.location.search);

			for (const [key, value] of urlParams.entries()) {
				const input = form.elements.namedItem(key) as HTMLSelectElement;
				const clearButton = document.getElementById(`clear-input-${key}`)! as HTMLButtonElement;

				if (input) {
					input.value = value;
					if (value !== "all" && clearButton) {
						clearButton.classList.remove("hidden");
					}
				}
			}

			form.addEventListener("change", async (event) => {
				const target = event.target! as HTMLSelectElement;
				const clearButton = document.getElementById(`clear-input-${target.name}`)! as HTMLButtonElement;

				if (target.value !== "all") {
					clearButton.classList.remove("hidden");
				} else {
					clearButton.classList.add("hidden");
				}

				try {
					const url = new URL("/api/getFilteredCars.json", window.location.origin);
					const formData = new FormData(form);

					url.search = "";

					for (const [key, value] of formData.entries()) {
						if (value !== "all") {
							url.searchParams.append(key, value.toString());
						}
					}

					const response = await fetch(url);
					const data = await response.json();

					resultFound.textContent = `(${data?.length ?? 0})`;
				} catch (error) {
					console.error(error);
				}
			});

			form.addEventListener("submit", async function (event) {
				event.preventDefault();
				try {
					const url = new URL(window.location.href);
					const formData = new FormData(form);

					url.search = "";

					for (const [key, value] of formData.entries()) {
						if (value !== "all") {
							url.searchParams.append(key, value.toString());
						}
					}

					window.location.href = url.toString();
				} catch (error) {
					console.error(error);
				}
			});

			const clearButtons = form.querySelectorAll("button[id^='clear-input-']");
			clearButtons.forEach((button) => {
				button.addEventListener("click", (event) => {
					const inputId = button.id.replace("clear-input-", "");
					const input = form.elements.namedItem(inputId) as HTMLSelectElement;

					if (input) {
						input.value = "all";
						input.dispatchEvent(new Event("change"));
						form.dispatchEvent(new Event("submit"));
					}
				});
			});
		}
	});
</script>
